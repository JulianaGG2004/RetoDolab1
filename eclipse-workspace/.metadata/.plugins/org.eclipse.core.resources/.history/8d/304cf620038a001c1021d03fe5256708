package com.retodolab.springboot.backend.reto.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bolsadeideas.springboot.backend.apirest.models.entity.Cliente;
import com.retodolab.springboot.backend.reto.models.entity.Pelicula;
import com.retodolab.springboot.backend.reto.models.services.IPeliculaService;
import com.retodolab.springboot.backend.reto.models.services.IUploadFileService;


@CrossOrigin(origins = {"http://localhost:4200"})
@RestController
@RequestMapping("/api")
public class PeliculaRestController {
	
	@Autowired 
	private IPeliculaService peliculaService;
	
	@Autowired
	private IUploadFileService uploadService;
	
	@GetMapping("/peliculas")
	public List<Pelicula> index(){
		return peliculaService.findAll();
	}
	
	@GetMapping("/peliculas/page/{page}")
	public Page<Pelicula> index(@PathVariable Integer page){
		Pageable pageable = PageRequest.of(page, 4);
		return peliculaService.findAll(pageable);
	}
	
	@GetMapping("/peliculas/{id}")
	public ResponseEntity<?> show(@PathVariable Long id) {
		
	Pelicula pelicula= null;
	Map<String, Object> response = new HashMap<>();
	try {
		pelicula = peliculaService.findById(id);
		}catch(DataAccessException e) {
			response.put("mensaje", "Error al realizar la consulta en la base de datos");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		

		
		if(pelicula == null) {
			response.put("mensaje", "La pelicula ID: ".concat(id.toString().concat(" No existe en la base de datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Pelicula>(pelicula, HttpStatus.OK); 
	}
}
